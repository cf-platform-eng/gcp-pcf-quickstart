---
groups:
  - name: gcp-pcf-quickstart
    jobs:
      - run-unit
      - prepare-project
      - generate-env
      - create-infrastructure
      - destroy-infrastructure
      - deploy-pcf
      - destroy-pcf
      - run-certification
      - destroy-all
      # - create-pull-request
      - shipit
  - name: tiles
    jobs:
      - update-opsman-image
      - update-cf-tile
      - update-gcp-service-broker
      - update-gcp-stackdriver-nozzle
      - update-healthwatch-tile

jobs:
  - name: run-unit
    plan:
      - in_parallel:
          - trigger: true
            get: omg-src-in
            resource: omg-src-in
          - get: ci-image
          - get: omg-src-ci
      - task: unit-tests
        image: ci-image
        file: omg-src-ci/ci/tasks/run-unit.yml

  - name: prepare-project
    plan:
      - in_parallel:
          - trigger: true
            get: omg-src-in
            resource: omg-src-in
          - get: ci-image
          - get: omg-src-ci

      - task: prepare-project
        image: ci-image
        file: omg-src-ci/ci/tasks/prepare-project.yml
        params:
          google_project: ((google_project))
          google_json_key_data: ((google_json_key_data))
          env_config: ((env_config))

  - name: generate-env
    serial: true
    serial_groups: [gcp-project]
    plan:
      - in_parallel:
          - trigger: true
            get: omg-src-in
            resource: omg-src-in
          - get: ci-image
          - get: omg-src-ci

      - in_parallel:
        task: generate-env
        image: ci-image
        file: omg-src-ci/ci/tasks/generate-env.yml
        params:
          google_project: ((google_project))
          google_json_key_data: ((google_json_key_data))
          env_file_name: ((env_file_name))
          env_config: ((env_config))

      - in_parallel:
          - put: omg-env
            params:
              file: omg-env/*.tgz

  - name: create-infrastructure
    serial: true
    serial_groups: [gcp-project]
    plan:
      - in_parallel:
          - trigger: true
            passed: [run-unit]
            get: omg-src-in
            resource: omg-src-in
          - trigger: true
            passed: [generate-env]
            get: omg-env
            resource: omg-env
          - get: ci-image
          - get: omg-src-ci
      - in_parallel:
        task: create-infrastructure
        image: ci-image
        file: omg-src-ci/ci/tasks/create-infrastructure.yml
        params:
          google_project: ((google_project))
          google_json_key_data: ((google_json_key_data))
          env_file_name: ((env_file_name))
          terraform_state_bucket: ((ci_bucket_name))
      - put: omg-env
        params:
          file: omg-env/*.tgz

  - name: destroy-pcf
    serial: true
    serial_groups: [gcp-project]
    plan:
      - in_parallel:
          - get: omg-src-in
            passed: [create-infrastructure]
          - get: omg-env
            passed: [create-infrastructure]
          - get: ci-image
          - get: omg-src-ci
      - do:
        - &destroy_pcf
          task: destroy-pcf
          image: ci-image
          file: omg-src-ci/ci/tasks/destroy-pcf.yml
          params:
            google_project: ((google_project))
            google_json_key_data: ((google_json_key_data))
            env_file_name: ((env_file_name))

  - name: destroy-infrastructure
    serial: true
    serial_groups: [gcp-project]
    plan:
      - in_parallel:
          - get: omg-src-in
            passed: [create-infrastructure]
          - get: omg-env
            passed: [create-infrastructure]
          - get: ci-image
          - get: omg-src-ci
      - do:
        - try:
            *destroy_pcf
        - &destroy_infrastructure
          task: destroy-infrastructure
          image: ci-image
          file: omg-src-ci/ci/tasks/destroy-infrastructure.yml
          params:
            google_project: ((google_project))
            google_json_key_data: ((google_json_key_data))
            env_file_name: ((env_file_name))
            terraform_state_bucket: ((ci_bucket_name))

  - name: deploy-pcf
    serial: true
    serial_groups: [gcp-project]
    plan:
      - in_parallel:
          - trigger: true
            passed: [create-infrastructure]
            get: omg-src-in
            resource: omg-src-in
          - trigger: true
            passed: [create-infrastructure]
            get: omg-env
            resource: omg-env
          - get: ci-image
          - get: omg-src-ci
      - do:
          - task: accept-eula
            image: ci-image
            file: omg-src-ci/ci/tasks/accept-eula.yml
            params:
              env_file_name: ((env_file_name))
          - task: deploy-pcf
            image: ci-image
            file: omg-src-ci/ci/tasks/deploy-pcf.yml
            params:
              env_file_name: ((env_file_name))

  - name: run-certification
    serial: true
    serial_groups: [gcp-project]
    plan:
      - in_parallel:
          - trigger: true
            passed: [deploy-pcf]
            get: omg-src-in
            resource: omg-src-in
          - trigger: true
            passed: [deploy-pcf]
            get: omg-env
            resource: omg-env
          - get: ci-image
          - get: omg-src-ci
      - in_parallel:
        task: run-certification
        image: ci-image
        file: omg-src-ci/ci/tasks/run-certification.yml
        params:
          env_file_name: ((env_file_name))

  - name: destroy-all
    serial: true
    serial_groups: [gcp-project]
    plan:
      - in_parallel:
          - trigger: true
            passed: [run-certification]
            get: omg-src-in
            resource: omg-src-in
          - trigger: true
            passed: [run-certification]
            get: omg-env
            resource: omg-env
          - get: ci-image
          - get: omg-src-ci
      - do:
        - *destroy_pcf
        - *destroy_infrastructure

# # TODO: should be a merge develop in to master
#   - name: create-pull-request
#     plan:
#     - in_parallel:
#         - get: omg-src-in
#           resource: omg-src-in
#           passed: [run-certification]
#         - get: ci-image
#         - get: omg-src-ci
#     - task: create-pull-request
#       image: ci-image
#       file: omg-src-ci/ci/tasks/create-pull-request.yml
#       params:
#         GITHUB_USER: ((github_user_name))
#         GITHUB_PASSWORD: ((github_access_token))

  - name: shipit
    plan:
    - in_parallel:
        - get: omg-src-develop
          resource: omg-src-in
          passed: [run-certification]
        - get: ci-image
        - get: omg-src-ci
        - get: version
    - task: shipit
      image: ci-image
      file: omg-src-ci/ci/tasks/shipit.yml
    - put: version
      params: { bump: minor }
    - put: omg-src-master
      params:
        repository: omg-src-develop
        tag: release/tag
        merge: true
    - put: gcp-github-release
      params:
        name: release/name
        tag: release/tag
        body: release/notes.md

  - name: update-opsman-image
    plan:
    - in_parallel:
      - get: opsman-tile
        trigger: true
        params:
          globs:
            - '*gcp*.yml'
      - get: repo
        resource: omg-src-in
      - get: ci-image
      - get: omg-src-ci
    - task: update-opsman-url
      image: ci-image
      file: omg-src-ci/ci/tasks/update-opsman-image.yml
    - put: omg-src-out
      params:
        repository: repo
        merge: true

  - name: update-cf-tile
    plan:
    - in_parallel:
      - get: tile
        resource: cf-tile
        trigger: true
        params: { globs: [] }
      - get: repo
        resource: omg-src-in
      - get: ci-image
      - get: omg-src-ci
    - task: update-srt-tile
      image: ci-image
      file: omg-src-ci/ci/tasks/update-tile.yml
      params:
        PIVNET_TOKEN: ((pivnet-legacy-token))
        TILE_NAME: cf
        TILE_BASE_DIR: src/omg-cli/templates/assets/tiles/srt
    - task: update-ert-tile
      image: ci-image
      file: omg-src-ci/ci/tasks/update-tile.yml
      params:
        PIVNET_TOKEN: ((pivnet-legacy-token))
        TILE_NAME: cf
        TILE_BASE_DIR: src/omg-cli/templates/assets/tiles/ert
        OPS_FILE: src/omg-cli/templates/assets/options/full.yml
    - put: omg-src-out
      params:
        repository: repo
        merge: true

  - name: update-gcp-service-broker
    plan:
    - in_parallel:
      - get: tile
        resource: gcp-service-broker
        trigger: true
        params: { globs: [] }
      - get: repo
        resource: omg-src-in
      - get: ci-image
      - get: omg-src-ci
    - task: update-tile
      image: ci-image
      file: omg-src-ci/ci/tasks/update-tile.yml
      params:
        PIVNET_TOKEN: ((pivnet-legacy-token))
        TILE_NAME: gcp-service-broker
        TILE_BASE_DIR: src/omg-cli/templates/assets/tiles/gcp-service-broker
    - put: omg-src-out
      params:
        repository: repo
        merge: true

  - name: update-gcp-stackdriver-nozzle
    plan:
    - in_parallel:
      - get: tile
        resource: gcp-stackdriver-nozzle
        trigger: true
        params: { globs: [] }
      - get: repo
        resource: omg-src-in
      - get: ci-image
      - get: omg-src-ci
    - task: update-tile
      image: ci-image
      file: omg-src-ci/ci/tasks/update-tile.yml
      params:
        PIVNET_TOKEN: ((pivnet-legacy-token))
        TILE_NAME: stackdriver-nozzle
        TILE_BASE_DIR: src/omg-cli/templates/assets/tiles/stackdriver-nozzle
    - put: omg-src-out
      params:
        repository: repo
        merge: true

  - name: update-healthwatch-tile
    plan:
    - in_parallel:
      - get: tile
        resource: healthwatch-tile
        trigger: true
        params: { globs: [] }
      - get: repo
        resource: omg-src-in
      - get: ci-image
      - get: omg-src-ci
    - task: update-ert-tile
      image: ci-image
      file: omg-src-ci/ci/tasks/update-tile.yml
      params:
        PIVNET_TOKEN: ((pivnet-legacy-token))
        TILE_NAME: p-healthwatch
        TILE_BASE_DIR: src/omg-cli/templates/assets/tiles/p-healthwatch
        OPS_FILE: src/omg-cli/templates/assets/options/healthwatch.yml
    - put: omg-src-out
      params:
        repository: repo
        merge: true

resources:
  - name: omg-src-in
    type: git
    source: &git_resource
      uri: ((source_uri))
      branch: ((source_branch))
      username: ((github_user_name))
      password: ((github_access_token))
      ignore_paths: [ci/*]

  - name: omg-src-master
    type: git
    source:
      uri: ((source_uri))
      branch: master
      username: ((github_user_name))
      password: ((github_access_token))

  - name: omg-src-ci
    type: git
    source:
      uri: ((source_uri))
      branch: ((source_branch))
      paths: [ci/*]
      disable_ci_skip: true

  - name: omg-src-out
    type: git
    source: *git_resource

  - name: omg-env
    type: gcs-resource
    source:
      bucket: ((ci_bucket_name))
      json_key: ((ci_json_key_date))
      versioned_file: ((env_file_name))

  - name: ci-image
    type: docker-image
    source:
      username: ((docker_hub_username))
      password: ((docker_hub_password))
      repository: ((docker_hub_repo))

  - name: opsman-tile
    type: pivnet
    source:
      api_token: ((pivnet_token))
      copy_metadata: true
      product_slug: ops-manager

  - name: cf-tile
    type: pivnet
    source:
      api_token: ((pivnet-token))
      copy_metadata: true
      product_slug: elastic-runtime

  - name: gcp-service-broker
    type: pivnet
    source:
      api_token: ((pivnet-token))
      copy_metadata: true
      product_slug: gcp-service-broker

  - name: gcp-stackdriver-nozzle
    type: pivnet
    source:
      api_token: ((pivnet-token))
      copy_metadata: true
      product_slug: gcp-stackdriver-nozzle

  - name: healthwatch-tile
    type: pivnet
    source:
      api_token: ((pivnet-token))
      copy_metadata: true
      product_slug: p-healthwatch

  - name: gcp-github-release
    type: github-release
    source:
      owner: cf-platform-eng
      repository: gcp-pcf-quickstart
      access_token: ((github_access_token))

  - name: version
    type: semver
    source :
      driver: git
      uri: ((source_uri))
      username: ((github_user_name))
      password: ((github_access_token))
      branch: version
      file: version
      initial_version: 3.0.0

resource_types:
  - name: gcs-resource
    type: docker-image
    source:
      repository: frodenas/gcs-resource

  - name: semver
    type: docker-image
    source:
      repository: concourse/semver-resource
      tag: latest

  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource

  - name: pivnet
    type: docker-image
    source:
      repository: pivotalcf/pivnet-resource
      tag: latest-final
